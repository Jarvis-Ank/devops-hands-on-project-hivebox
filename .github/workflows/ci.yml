name: CI Pipeline

on:
    push:
        branches: ["main"]  # Run CI on pushes to main

    pull_request:
        branches: ["main"]  # Also run CI on PRs targeting main

jobs: 
    build-test: 
        env:
            CI: "true"
        runs-on: ubuntu-latest  # VM host for running CI steps
        steps: 
            # Step 1: Checkout code
            - name: Checkout code
              uses: actions/checkout@v4

            # Step 2: Set up Python
            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: "3.12"
            
            # Step 3: Install dependencies & CI tools
            - name: Install dependencies
              run: | 
               python -m pip install --upgrade pip
               pip install -r requirements.txt
               pip install pylint pytest

            # Step 4: Lint all Python code
            - name: Lint Python code
              run: pylint **/*.py

            # Step 5: Lint Dockerfile
            - name: Lint Dockerfile
              uses: hadolint/hadolint-action@v3.1.0
              with:
                   dockerfile: Dockerfile

            # Step to scan k8s manifests
            - name: Scan Kubernetes manifests with Terrascan
              uses: tenable/terrascan-action@main
              with:
                 iac_type: 'k8s'
                 path: 'k8s'
                 only_warn: true

            # Step 6: Build Docker image
            - name: Build Docker image
              run: docker build -t hivebox:${GITHUB_SHA::7} .

            # Step 7: Run unit tests using pytest
            - name: Run unit tests
              env:
                METEO_API_URL: "http://dummy-url-for-testing.com"
              run: python -m pytest tests/unit/ -v

            # Step 8: Run container in background for testing
            - name: Run container
              run: |
                echo "METEO_API_URL=${{ secrets.METEO_API_URL }}" > .env.ci

                CONTAINER_ID=$(docker run -d -p 8000:8000 --env-file .env.ci hivebox:${GITHUB_SHA::7})
                echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_ENV
                sleep 15

            # ADD THIS NEW STEP FOR DIAGNOSIS
            - name: Check container status
              run: docker ps -a

            # Step 9: Run integration tests against the container
            - name: Run integration tests
              run: python -m pytest tests/integration/ -v

            # This should be the LAST step in your job
            - name: Show container logs on failure
              if: failure()
              run: docker logs ${{ env.CONTAINER_ID }}
            
          

